name: Build/release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: darwin
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: npm
      - name: Install dependencies
        run: npm ci

      # Puppeteer browser caching (match CI approach)
      - name: Cache Puppeteer browsers (Linux)
        if: matrix.platform == 'linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/puppeteer
          key: puppeteer-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            puppeteer-${{ runner.os }}-

      - name: Cache Puppeteer browsers (macOS)
        if: matrix.platform == 'darwin'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/puppeteer
          key: puppeteer-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            puppeteer-${{ runner.os }}-

      - name: Determine Windows Puppeteer cache path
        if: matrix.platform == 'win32'
        id: win_cache
        shell: bash
        run: |
          echo "cache_dir=$LOCALAPPDATA/puppeteer" >> $GITHUB_OUTPUT

      - name: Cache Puppeteer browsers (Windows)
        if: matrix.platform == 'win32'
        uses: actions/cache@v4
        with:
          path: ${{ steps.win_cache.outputs.cache_dir }}
          key: puppeteer-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            puppeteer-${{ runner.os }}-

      - name: Install Chromium (Linux)
        if: matrix.platform == 'linux'
        run: npx @puppeteer/browsers install chromium@latest
        env:
          PUPPETEER_CACHE_DIR: ~/.cache/puppeteer

      - name: Install Chromium (macOS)
        if: matrix.platform == 'darwin'
        run: npx @puppeteer/browsers install chromium@latest
        env:
          PUPPETEER_CACHE_DIR: ~/Library/Caches/puppeteer

      - name: Install Chromium (Windows)
        if: matrix.platform == 'win32'
        run: npx @puppeteer/browsers install chromium@latest
        env:
          PUPPETEER_CACHE_DIR: ${{ steps.win_cache.outputs.cache_dir }}

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Run tests
        run: npm test
        env:
          CI: true
          AUTO_DOWNLOAD_BROWSER: false
        timeout-minutes: 15

      - name: Run linting
        run: npm run lint

      - name: Build and publish (Electron Forge full lifecycle)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run publish
        timeout-minutes: 30

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: |
            out/make/
            !out/make/**/node_modules/
          retention-days: 30

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}
          path: |
            logs/
            .vite/
            out/
          retention-days: 7
